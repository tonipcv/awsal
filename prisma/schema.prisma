generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Protocol {
  id                     String                  @id @default(cuid())
  name                   String
  description           String?
  doctor_id             String
  is_active             Boolean                 @default(true)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now()) @updatedAt
  duration             Int?                    @default(30)
  modal_title           String?
  modal_video_url       String?
  modal_description     String?
  modal_button_text     String?                 @default("Saber mais")
  modal_button_url      String?
  show_doctor_info      Boolean?                @default(false)
  is_template           Boolean?                @default(false)
  cover_image           String?
  consultation_date    DateTime?               @db.Timestamp(6)
  onboarding_template_id String?
  schedule             Json?                   @default("{}")
  last_schedule_update DateTime?               @default(now()) @db.Timestamptz(6)
  checkin_questions     DailyCheckinQuestion[]
  checkin_responses     DailyCheckinResponse[]
  days                 ProtocolDay[]
  symptom_reports       SymptomReport[]
  default_for           DoctorDefaultProtocol[]
  courses              ProtocolCourse[]
  protocol_faqs        ProtocolFAQ[]
  prescriptions        ProtocolPrescription[]
  protocol_products    protocol_products[]
  doctor               User                    @relation("DoctorProtocols", fields: [doctor_id], references: [id])
  onboarding_template   OnboardingTemplate?     @relation(fields: [onboarding_template_id], references: [id])
  referrals            referrals[]

  @@index([doctor_id])
  @@index([onboarding_template_id])
  @@map("protocols")
}

model ProtocolDay {
  id          String            @id @default(cuid())
  protocolId  String
  dayNumber   Int
  title       String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  protocol    Protocol          @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  sessions    ProtocolSession[]
}

model ProtocolSession {
  id            String         @id @default(cuid())
  protocolDayId String
  sessionNumber Int
  title         String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  protocolDay   ProtocolDay    @relation(fields: [protocolDayId], references: [id], onDelete: Cascade)
  tasks         ProtocolTask[]
}

model ProtocolTask {
  id                String                  @id @default(cuid())
  protocolSessionId String
  title             String
  description       String?
  type              String                  @default("task")
  duration          Int?
  orderIndex        Int                     @default(0)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now()) @updatedAt
  hasMoreInfo       Boolean?                @default(false)
  videoUrl          String?
  fullExplanation   String?
  productId         String?
  modalTitle        String?
  modalButtonText   String?
  modalButtonUrl    String?
  ProtocolContent   ProtocolContent[]
  progress          ProtocolTaskProgress[]
  protocolSession   ProtocolSession         @relation(fields: [protocolSessionId], references: [id], onDelete: Cascade)
}

model ProtocolContent {
  id             String       @id @default(cuid())
  protocolTaskId String
  type           String
  content        String
  orderIndex     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  ProtocolTask   ProtocolTask @relation(fields: [protocolTaskId], references: [id], onDelete: Cascade)
}

model ProtocolPrescription {
  id                          String                  @id @default(cuid())
  protocol_id                 String
  user_id                     String
  prescribed_by               String
  prescribed_at               DateTime                @default(now())
  planned_start_date          DateTime
  actual_start_date          DateTime?
  planned_end_date           DateTime
  actual_end_date            DateTime?
  status                     PrescriptionStatus      @default(PRESCRIBED)
  current_day                Int                     @default(1)
  adherence_rate             Float?
  last_progress_date         DateTime?
  paused_at                  DateTime?
  pause_reason               String?
  abandoned_at               DateTime?
  abandon_reason             String?
  consultation_date          DateTime?               @db.Timestamptz(6)
  onboarding_link            String?                 @unique
  pre_consultation_template_id String?
  pre_consultation_status    String?
  created_at                 DateTime                @default(now())
  updated_at                 DateTime                @default(now()) @updatedAt
  progress                   ProtocolTaskProgress[]
  doctor                     User                    @relation("DoctorPrescriptions", fields: [prescribed_by], references: [id], onUpdate: NoAction)
  protocol                   Protocol                @relation(fields: [protocol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient                    User                    @relation("PatientPrescriptions", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, protocol_id])
  @@index([user_id])
  @@index([prescribed_by])
  @@index([status])
  @@map("protocol_prescriptions")
}

model ProtocolTaskProgress {
  id             String               @id @default(cuid())
  prescriptionId String
  dayNumber      Int
  scheduledDate  DateTime
  completedAt    DateTime?
  status         DayStatus            @default(PENDING)
  notes          String?
  protocolTaskId String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  prescription   ProtocolPrescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  protocolTask   ProtocolTask?        @relation(fields: [protocolTaskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([prescriptionId, protocolTaskId, scheduledDate], map: "protocol_task_progress_unique")
  @@index([prescriptionId])
  @@index([status])
  @@index([scheduledDate])
  @@map("protocol_task_progress")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id               String           @id(map: "Course_pkey") @default(cuid())
  title            String
  description      String?
  thumbnail        String?
  isPublished      Boolean          @default(false)
  price            Decimal?         @db.Decimal(10, 2)
  doctorId         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  coverImage       String?
  modalTitle       String?
  modalVideoUrl    String?
  modalDescription String?
  modalButtonText  String?          @default("Saber mais")
  modalButtonUrl   String?
  doctor           User             @relation("DoctorCourses", fields: [doctorId], references: [id], onDelete: Cascade, map: "Course_doctorId_fkey")
  modules          Module[]
  protocols        ProtocolCourse[]
  assignments      UserCourse[]

  @@map("courses")
}

model Module {
  id          String   @id(map: "Module_pkey") @default(cuid())
  title       String
  description String?
  orderIndex  Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  lessons     Lesson[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "Module_courseId_fkey")

  @@map("modules")
}

model Lesson {
  id          String       @id(map: "Lesson_pkey") @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int?
  orderIndex  Int
  moduleId    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  module      Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade, map: "Lesson_moduleId_fkey")
  progress    UserLesson[]

  @@map("lessons")
}

model UserCourse {
  id          String    @id(map: "UserCourse_pkey") @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Int       @default(0)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "UserCourse_courseId_fkey")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserCourse_userId_fkey")

  @@unique([userId, courseId], map: "UserCourse_userId_courseId_key")
  @@map("user_courses")
}

model UserLesson {
  id          String    @id(map: "UserLesson_pkey") @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime?
  watchTime   Int       @default(0)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade, map: "UserLesson_lessonId_fkey")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserLesson_userId_fkey")

  @@unique([userId, lessonId], map: "UserLesson_userId_lessonId_key")
  @@map("user_lessons")
}

model products {
  id                String              @id
  name              String
  description       String?
  price             Decimal             @db.Decimal(10, 2)
  category          String
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  doctorId          String?
  doctor            User?               @relation("DoctorProducts", fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  protocol_products protocol_products[]

  @@index([doctorId])
}

model protocol_products {
  id           String   @id
  protocolId   String
  productId    String
  quantity     Int      @default(1)
  instructions String?
  createdAt    DateTime @default(now())
  products     products @relation(fields: [productId], references: [id], onDelete: Cascade)
  protocols    Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([protocolId, productId])
}

model SystemMetrics {
  id                  String   @id(map: "SystemMetrics_pkey") @default(cuid())
  date                DateTime @unique(map: "SystemMetrics_date_key")
  totalUsers          Int      @default(0)
  activeUsers         Int      @default(0)
  totalDoctors        Int      @default(0)
  totalPatients       Int      @default(0)
  totalReferrals      Int      @default(0)
  totalRevenue        Decimal  @default(0) @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  totalProtocols      Int?     @default(0)
  totalCourses        Int?     @default(0)
  activeSubscriptions Int?     @default(0)
  trialSubscriptions  Int?     @default(0)

  @@map("system_metrics")
}

model Clinic {
  id                         String                      @id @default(cuid())
  name                       String
  description                String?
  ownerId                    String
  isActive                   Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  country                    String?
  website                    String?
  logo                       String?
  slug                       String?                     @unique @db.VarChar(255)
  onboardingTemplates        OnboardingTemplate[]
  members                    ClinicMember[]
  owner                      User                        @relation("ClinicOwner", fields: [ownerId], references: [id])
  doctorPatientRelationships DoctorPatientRelationship[]
  unified_subscriptions      unified_subscriptions[]     @relation("ClinicSubscriptions")

  @@index([ownerId])
  @@index([slug])
  @@map("clinics")
}

model ClinicMember {
  id       String   @id @default(cuid())
  clinicId String
  userId   String
  role     String   @default("DOCTOR")
  isActive Boolean  @default(true)
  joinedAt DateTime @default(now())
  clinic   Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clinicId, userId])
  @@map("clinic_members")
}

model ReferralLead {
  id                                   String           @id(map: "ReferralLead_pkey") @default(cuid())
  name                                 String
  email                                String
  phone                                String?
  message                              String?
  status                               String           @default("NEW")
  source                               String?
  referrerId                           String?
  doctorId                             String?
  convertedUserId                      String?
  convertedAt                          DateTime?
  creditValue                          Decimal          @default(0) @db.Decimal(10, 2)
  creditAwarded                        Boolean          @default(false)
  creditAwardedAt                      DateTime?
  notes                                String?
  followUpDate                         DateTime?
  lastContactDate                      DateTime?
  priority                             String           @default("MEDIUM")
  tags                                 String[]
  customFields                         Json?
  createdAt                            DateTime         @default(now())
  updatedAt                            DateTime         @default(now()) @updatedAt
  referralCode                         String?
  referral_credits                     ReferralCredit[]
  convertedUser                        User?            @relation("ConvertedFromLead", fields: [convertedUserId], references: [id], map: "ReferralLead_convertedUserId_fkey")
  doctor                               User?            @relation("DoctorLeads", fields: [doctorId], references: [id], map: "ReferralLead_doctorId_fkey")
  User_referral_leads_referrerIdToUser User?            @relation("referral_leads_referrerIdToUser", fields: [referrerId], references: [id], map: "ReferralLead_referrerId_fkey")

  @@unique([email, doctorId], map: "ReferralLead_email_doctorId_key")
  @@index([doctorId], map: "ReferralLead_doctorId_idx")
  @@index([referrerId], map: "ReferralLead_referrerId_idx")
  @@index([status], map: "ReferralLead_status_idx")
  @@map("referral_leads")
}

model ReferralCredit {
  id              String        @id(map: "ReferralCredit_pkey") @default(cuid())
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  type            String        @default("REFERRAL")
  description     String?
  referralLeadId  String?
  expiresAt       DateTime?
  isUsed          Boolean       @default(false)
  usedAt          DateTime?
  usedForRewardId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  referral_leads  ReferralLead? @relation(fields: [referralLeadId], references: [id], map: "ReferralCredit_referralLeadId_fkey")
  user            User          @relation("UserCredits", fields: [userId], references: [id], onDelete: Cascade, map: "ReferralCredit_userId_fkey")

  @@index([isUsed], map: "ReferralCredit_isUsed_idx")
  @@index([userId], map: "ReferralCredit_userId_idx")
  @@map("referral_credits")
}

model ReferralReward {
  id                 String             @id(map: "ReferralReward_pkey") @default(cuid())
  title              String
  description        String?
  type               String             @default("DISCOUNT")
  value              Decimal            @db.Decimal(10, 2)
  costInCredits      Decimal            @db.Decimal(10, 2)
  isActive           Boolean            @default(true)
  validUntil         DateTime?
  maxRedemptions     Int?
  currentRedemptions Int                @default(0)
  doctorId           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  doctor             User               @relation("DoctorRewards", fields: [doctorId], references: [id], onDelete: Cascade, map: "ReferralReward_doctorId_fkey")
  redemptions        RewardRedemption[]

  @@map("referral_rewards")
}

model RewardRedemption {
  id          String         @id(map: "RewardRedemption_pkey") @default(cuid())
  userId      String
  rewardId    String
  creditsUsed Decimal        @db.Decimal(10, 2)
  status      String         @default("PENDING")
  redeemedAt  DateTime       @default(now())
  fulfilledAt DateTime?
  notes       String?
  reward      ReferralReward @relation(fields: [rewardId], references: [id], onDelete: Cascade, map: "RewardRedemption_rewardId_fkey")
  user        User           @relation("UserRedemptions", fields: [userId], references: [id], onDelete: Cascade, map: "RewardRedemption_userId_fkey")

  @@index([userId], map: "RewardRedemption_userId_idx")
  @@map("reward_redemptions")
}

model ReferralFormSettings {
  id                 String   @id(map: "ReferralFormSettings_pkey") @default(cuid())
  doctorId           String   @unique(map: "ReferralFormSettings_doctorId_key")
  title              String   @default("Indique um amigo")
  description        String?
  thankYouMessage    String?
  customFields       Json?
  isActive           Boolean  @default(true)
  allowAnonymous     Boolean  @default(false)
  requirePhone       Boolean  @default(false)
  requireMessage     Boolean  @default(false)
  autoAssignToDoctor Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  doctor             User     @relation("DoctorFormSettings", fields: [doctorId], references: [id], onDelete: Cascade, map: "ReferralFormSettings_doctorId_fkey")

  @@map("referral_form_settings")
}

model ConsultationForm {
  id                 String                   @id(map: "ConsultationForm_pkey") @default(cuid())
  doctorId           String                   @unique(map: "ConsultationForm_doctorId_key")
  title              String                   @default("Formulário de Consulta")
  description        String?
  fields             Json                     @default("[]")
  isActive           Boolean                  @default(true)
  allowAnonymous     Boolean                  @default(false)
  requireAuth        Boolean                  @default(false)
  autoCreatePatient  Boolean                  @default(true)
  emailNotifications Boolean                  @default(true)
  smsNotifications   Boolean                  @default(false)
  thankYouMessage    String?
  redirectUrl        String?
  customCss          String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @default(now()) @updatedAt
  doctor             User                     @relation("DoctorConsultationForms", fields: [doctorId], references: [id], onDelete: Cascade, map: "ConsultationForm_doctorId_fkey")
  submissions        ConsultationSubmission[]

  @@map("consultation_forms")
}

model ConsultationSubmission {
  id                                           String           @id(map: "ConsultationSubmission_pkey") @default(cuid())
  formId                                       String
  patientId                                    String?
  doctorId                                     String
  submissionData                               Json
  status                                       String           @default("NEW")
  priority                                     String           @default("MEDIUM")
  notes                                        String?
  followUpDate                                 DateTime?
  lastContactDate                              DateTime?
  convertedToPatient                           Boolean          @default(false)
  convertedAt                                  DateTime?
  createdAt                                    DateTime         @default(now())
  updatedAt                                    DateTime         @default(now()) @updatedAt
  User_consultation_submissions_doctorIdToUser User             @relation("consultation_submissions_doctorIdToUser", fields: [doctorId], references: [id], onDelete: Cascade, map: "ConsultationSubmission_doctorId_fkey")
  form                                         ConsultationForm @relation(fields: [formId], references: [id], onDelete: Cascade, map: "ConsultationSubmission_formId_fkey")
  patient                                      User?            @relation("ConvertedConsultations", fields: [patientId], references: [id], map: "ConsultationSubmission_patientId_fkey")

  @@index([doctorId], map: "ConsultationSubmission_doctorId_idx")
  @@index([formId], map: "ConsultationSubmission_formId_idx")
  @@map("consultation_submissions")
}

model leads {
  id         String   @id
  name       String
  email      String
  phone      String?
  message    String?
  status     String   @default("NEW")
  source     String?
  referrerId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  User       User?    @relation(fields: [referrerId], references: [id])
}

model referrals {
  id                             String    @id @default(cuid())
  patientId                      String
  doctorId                       String
  protocolId                     String?
  status                         String    @default("PENDING")
  notes                          String?
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @default(now()) @updatedAt
  referral_type                  String?   @default("PROTOCOL") @db.VarChar(20)
  priority                       String?   @default("MEDIUM") @db.VarChar(10)
  valid_until                    DateTime? @db.Timestamp(6)
  accepted_at                    DateTime? @db.Timestamp(6)
  completed_at                   DateTime? @db.Timestamp(6)
  User_referrals_doctorIdToUser  User      @relation("referrals_doctorIdToUser", fields: [doctorId], references: [id])
  User_referrals_patientIdToUser User      @relation("referrals_patientIdToUser", fields: [patientId], references: [id])
  protocol                       Protocol? @relation(fields: [protocolId], references: [id])

  @@index([referral_type], map: "idx_referrals_referral_type")
  @@index([status], map: "idx_referrals_status")
  @@map("referrals")
}

model ClinicReferral {
  id             String    @id @default(dbgenerated("(gen_random_uuid())::text")) @db.VarChar(255)
  clinic_name    String    @db.VarChar(255)
  contact_name   String    @db.VarChar(255)
  contact_email  String    @db.VarChar(255)
  contact_phone  String?   @db.VarChar(255)
  clinic_address String?
  specialties    String?
  notes          String?
  status         String?   @default("PENDING") @db.VarChar(50)
  reward_status  String?   @default("PENDING") @db.VarChar(50)
  reward_months  Int?      @default(1)
  referred_by_id String    @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  User           User      @relation(fields: [referred_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_clinic_referrals_referred_by")

  @@unique([referred_by_id, contact_email], map: "unique_referral_per_doctor_email")
  @@index([created_at], map: "idx_clinic_referrals_created_at")
  @@index([referred_by_id], map: "idx_clinic_referrals_referred_by_id")
  @@index([reward_status], map: "idx_clinic_referrals_reward_status")
  @@index([status], map: "idx_clinic_referrals_status")
  @@map("clinic_referrals")
}

model DoctorFAQ {
  id        String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  doctorId  String
  question  String
  answer    String
  category  String?            @default("general")
  isActive  Boolean            @default(true)
  priority  Int                @default(0)
  tags      String?
  createdAt DateTime           @default(now()) @db.Timestamp(6)
  updatedAt DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  doctor    User               @relation("DoctorFAQs", fields: [doctorId], references: [id], onDelete: Cascade)
  messages  PatientAIMessage[]

  @@index([doctorId, isActive])
  @@index([category])
}

model PatientAIConversation {
  id        String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  patientId String
  doctorId  String
  title     String?            @default("Nova Conversa")
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now()) @db.Timestamp(6)
  updatedAt DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  doctor    User               @relation("DoctorConversations", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   User               @relation("PatientConversations", fields: [patientId], references: [id], onDelete: Cascade)
  messages  PatientAIMessage[]

  @@index([patientId, doctorId])
  @@index([isActive])
  @@index([doctorId])
  @@index([patientId])
}

model PatientAIMessage {
  id             String                @id @default(dbgenerated("(gen_random_uuid())::text"))
  conversationId String
  role           String
  content        String
  isFromFAQ      Boolean               @default(false)
  faqId          String?
  confidence     Float?                @db.Real
  needsReview    Boolean               @default(false)
  reviewedAt     DateTime?             @db.Timestamp(6)
  reviewedBy     String?
  createdAt      DateTime              @default(now()) @db.Timestamp(6)
  conversation   PatientAIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  faq            DoctorFAQ?            @relation(fields: [faqId], references: [id])
  reviewer       User?                 @relation("MessageReviewer", fields: [reviewedBy], references: [id])

  @@index([conversationId])
  @@index([needsReview])
  @@index([role])
}

model AIAssistantSettings {
  id                  String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  doctorId            String   @unique
  isEnabled           Boolean  @default(true)
  autoReplyEnabled    Boolean  @default(true)
  confidenceThreshold Float    @default(0.8) @db.Real
  businessHoursOnly   Boolean  @default(false)
  businessHoursStart  String?  @default("09:00")
  businessHoursEnd    String?  @default("18:00")
  welcomeMessage      String?  @default("Olá! Sou o assistente de IA do Dr. {doctorName}. Como posso ajudá-lo hoje?")
  fallbackMessage     String?  @default("Desculpe, não consegui encontrar uma resposta adequada. Sua pergunta foi encaminhada para o médico.")
  maxDailyMessages    Int?     @default(50)
  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @default(now()) @updatedAt @db.Timestamp(6)
  doctor              User     @relation("DoctorAISettings", fields: [doctorId], references: [id], onDelete: Cascade)
}

model DailyCheckinQuestion {
  id         String                   @id @default(cuid())
  protocolId String
  question   String
  type       DailyCheckinQuestionType
  options    String?
  isRequired Boolean                  @default(true)
  order      Int                      @default(0)
  isActive   Boolean                  @default(true)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @default(now()) @updatedAt
  protocol   Protocol                 @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  responses  DailyCheckinResponse[]
}

model DailyCheckinResponse {
  id         String               @id @default(cuid())
  userId     String
  questionId String
  protocolId String
  date       DateTime             @db.Date
  answer     String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @default(now()) @updatedAt
  protocol   Protocol             @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  question   DailyCheckinQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, date])
}

model SymptomReport {
  id          String                    @id @default(cuid())
  userId      String
  protocolId  String
  dayNumber   Int
  title       String                    @default("Relatório de Sintomas")
  description String?
  symptoms    String
  severity    Int?                      @default(1)
  reportTime  DateTime
  isNow       Boolean                   @default(true)
  status      SymptomReportStatus       @default(PENDING)
  doctorNotes String?
  reviewedAt  DateTime?
  reviewedBy  String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @default(now()) @updatedAt
  protocol    Protocol                  @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  reviewer    User?                     @relation("SymptomReportReviewer", fields: [reviewedBy], references: [id])
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments SymptomReportAttachment[]

  @@index([userId, protocolId])
  @@index([status])
  @@index([reportTime])
  @@index([dayNumber])
}

model SymptomReportAttachment {
  id              String        @id @default(cuid())
  symptomReportId String
  fileName        String
  originalName    String
  fileSize        Int
  mimeType        String
  fileUrl         String
  uploadedAt      DateTime      @default(now())
  symptomReport   SymptomReport @relation(fields: [symptomReportId], references: [id], onDelete: Cascade)

  @@index([symptomReportId])
}

model OnboardingTemplate {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  doctorId           String
  clinicId           String?
  isActive           Boolean              @default(true)
  isPublic           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  welcomeTitle       String?
  welcomeDescription String?
  welcomeVideoUrl    String?
  welcomeButtonText  String?
  successTitle       String?
  successDescription String?
  successVideoUrl    String?
  successButtonText  String?
  successButtonUrl   String?
  welcomeItems       String[]
  estimatedTime      Int?
  nextSteps          String[]
  contactEmail       String?
  contactPhone       String?
  responses          OnboardingResponse[]
  steps              OnboardingStep[]
  clinic             Clinic?              @relation(fields: [clinicId], references: [id])
  doctor             User                 @relation("DoctorTemplates", fields: [doctorId], references: [id])
  protocols          Protocol[]

  @@index([doctorId])
  @@index([clinicId])
}

model OnboardingStep {
  id           String             @id @default(cuid())
  templateId   String
  question     String
  description  String?
  type         String
  options      String[]           @default([])
  required     Boolean            @default(true)
  showToDoctor Boolean            @default(true)
  order        Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  answers      OnboardingAnswer[]
  template     OnboardingTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model OnboardingResponse {
  id          String             @id @default(cuid())
  templateId  String
  userId      String?
  email       String
  token       String             @unique
  status      String             @default("PENDING")
  completedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  answers     OnboardingAnswer[]
  template    OnboardingTemplate @relation(fields: [templateId], references: [id])
  user        User?              @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([token])
}

model OnboardingAnswer {
  id         String             @id @default(cuid())
  responseId String
  stepId     String
  answer     String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  response   OnboardingResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  step       OnboardingStep     @relation(fields: [stepId], references: [id])

  @@index([responseId])
  @@index([stepId])
}

model DoctorDefaultProtocol {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doctorId   String
  protocolId String
  doctor     User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([doctorId, protocolId])
  @@index([doctorId])
  @@index([protocolId])
  @@map("doctor_default_protocols")
}

model DoctorPatientRelationship {
  id         String    @id @default(cuid())
  patientId  String    @map("patient_id")
  doctorId   String    @map("doctor_id")
  clinicId   String?   @map("clinic_id")
  isActive   Boolean   @default(true) @map("is_active")
  isPrimary  Boolean   @default(false) @map("is_primary")
  speciality String?
  notes      String?
  startDate  DateTime  @default(now()) @map("start_date")
  endDate    DateTime? @map("end_date")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  clinic     Clinic?   @relation(fields: [clinicId], references: [id])
  doctor     User      @relation("DoctorPatients", fields: [doctorId], references: [id], onDelete: Cascade)
  patient    User      @relation("PatientDoctors", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, doctorId])
  @@index([patientId])
  @@index([doctorId])
  @@index([clinicId])
  @@map("doctor_patient_relationships")
}

model ProtocolCourse {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  protocolId String    @db.VarChar(255)
  courseId   String    @db.VarChar(255)
  orderIndex Int?      @default(0)
  isRequired Boolean?  @default(true)
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  protocol   Protocol  @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([protocolId, courseId], map: "unique_protocol_course")
  @@index([protocolId])
  @@index([courseId])
  @@index([courseId], map: "idx_protocol_courses_course_id")
  @@index([protocolId], map: "idx_protocol_courses_protocol_id")
  @@map("protocol_courses")
}

model ProtocolFAQ {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  protocol_id String    @db.VarChar(255)
  question    String
  answer      String
  category    String?   @default("general") @db.VarChar(50)
  is_active   Boolean?  @default(true)
  priority    Int?      @default(0)
  tags        String[]  @default([])
  ai_context  String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  protocols   Protocol  @relation(fields: [protocol_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_protocol_faqs_protocol")

  @@index([category], map: "idx_protocol_faqs_category")
  @@index([is_active], map: "idx_protocol_faqs_is_active")
  @@index([protocol_id], map: "idx_protocol_faqs_protocol_id")
  @@index([tags], map: "idx_protocol_faqs_tags", type: Gin)
  @@map("protocol_faqs")
}

model VoiceNote {
  id            String              @id @default(uuid())
  patientId     String
  doctorId      String
  audioUrl      String
  duration      Int
  status        VoiceNoteStatus     @default(PROCESSING)
  transcription String?
  summary       String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  checklist     VoiceNoteChecklist?
  doctor        User                @relation("DoctorVoiceNotes", fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  patient       User                @relation("PatientVoiceNotes", fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@map("voice_notes")
}

model VoiceNoteChecklist {
  id          String    @id @default(uuid())
  voiceNoteId String    @unique
  items       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  voiceNote   VoiceNote @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("voice_note_checklists")
}

model Habit {
  id          String        @id @default(cuid())
  userId      String
  title       String
  category    String        @default("personal")
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  progress    HabitProgress[]
  user        User          @relation("UserHabits", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([isActive])
  @@map("habits")
}

model HabitProgress {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime @db.Date
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId])
  @@index([date])
  @@map("habit_progress")
}

model User {
  id                       String                      @id
  email                    String                      @unique
  name                     String?
  image                    String?
  role                     String                      @default("PATIENT")
  is_active                Boolean                     @default(true)
  created_at               DateTime                    @default(now())
  updated_at               DateTime                    @default(now()) @updatedAt
  email_verified           DateTime?
  password                 String?
  reset_token              String?
  reset_token_expiry       DateTime?
  verification_code        String?
  verification_code_expiry DateTime?
  doctor_id                String?
  referral_code            String?                     @unique
  phone                    String?
  birth_date               DateTime?                   @db.Date
  gender                   String?
  address                  String?
  emergency_contact        String?
  emergency_phone          String?
  medical_history          String?
  allergies                String?
  medications              String?
  notes                    String?
  google_review_link       String?
  ai_assistant_settings    AIAssistantSettings?        @relation("DoctorAISettings")
  accounts                 Account[]
  checkin_responses        DailyCheckinResponse[]
  doctor_faqs              DoctorFAQ[]                 @relation("DoctorFAQs")
  onboarding_responses     OnboardingResponse[]
  doctor_templates         OnboardingTemplate[]        @relation("DoctorTemplates")
  doctor_conversations     PatientAIConversation[]     @relation("DoctorConversations")
  patient_conversations    PatientAIConversation[]     @relation("PatientConversations")
  reviewed_messages        PatientAIMessage[]          @relation("MessageReviewer")
  sessions                 Session[]
  reviewed_symptom_reports SymptomReport[]             @relation("SymptomReportReviewer")
  symptom_reports          SymptomReport[]
  User                     User?                       @relation("UserToUser", fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_users              User[]                      @relation("UserToUser")
  clinic_memberships       ClinicMember[]
  clinic_referrals         ClinicReferral[]
  owned_clinics            Clinic[]                    @relation("ClinicOwner")
  consultation_form        ConsultationForm?           @relation("DoctorConsultationForms")
  consultation_submissions ConsultationSubmission[]    @relation("consultation_submissions_doctorIdToUser")
  converted_consultations  ConsultationSubmission[]    @relation("ConvertedConsultations")
  created_courses          Course[]                    @relation("DoctorCourses")
  default_protocols        DoctorDefaultProtocol[]
  doctor_relationships     DoctorPatientRelationship[] @relation("DoctorPatients")
  patient_relationships    DoctorPatientRelationship[] @relation("PatientDoctors")
  leads                    leads[]
  patient_documents_doctor patient_documents[]         @relation("patient_documents_doctor_idToUser")
  patient_documents_patient patient_documents[]         @relation("patient_documents_patient_idToUser")
  created_products         products[]                  @relation("DoctorProducts")
  prescribed_protocols     ProtocolPrescription[]      @relation("DoctorPrescriptions")
  patient_prescriptions    ProtocolPrescription[]      @relation("PatientPrescriptions")
  created_protocols        Protocol[]                  @relation("DoctorProtocols")
  credits                  ReferralCredit[]            @relation("UserCredits")
  form_settings           ReferralFormSettings?       @relation("DoctorFormSettings")
  converted_from_lead     ReferralLead[]              @relation("ConvertedFromLead")
  leads_received          ReferralLead[]              @relation("DoctorLeads")
  referral_leads          ReferralLead[]              @relation("referral_leads_referrerIdToUser")
  offered_rewards         ReferralReward[]            @relation("DoctorRewards")
  referrals_doctor        referrals[]                 @relation("referrals_doctorIdToUser")
  referrals_patient       referrals[]                 @relation("referrals_patientIdToUser")
  redemptions             RewardRedemption[]          @relation("UserRedemptions")
  assigned_courses        UserCourse[]
  lesson_progress         UserLesson[]
  doctor_voice_notes      VoiceNote[]                 @relation("DoctorVoiceNotes")
  patient_voice_notes     VoiceNote[]                 @relation("PatientVoiceNotes")
  habits                  Habit[]                     @relation("UserHabits")
  unified_subscriptions   unified_subscriptions[]     @relation("UserSubscriptions")
  google_calendar         GoogleCalendarCredentials?  @relation("DoctorGoogleCalendar")
  doctor_appointments     Appointment[]               @relation("DoctorAppointments")
  patient_appointments    Appointment[]               @relation("PatientAppointments")
}

model patient_document_metadata {
  id                String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  document_id       String            @unique
  title             String            @db.VarChar(255)
  keywords          String[]          @default([])
  categories        String[]          @default([])
  importance        String?           @default("MEDIUM") @db.VarChar(50)
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  patient_documents patient_documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([document_id], map: "idx_patient_document_metadata_document_id")
}

model patient_documents {
  id                                      String                     @id @default(dbgenerated("(gen_random_uuid())::text"))
  patient_id                              String
  doctor_id                               String
  file_name                               String                     @db.VarChar(255)
  file_url                                String                     @db.VarChar(255)
  file_type                               String                     @db.VarChar(50)
  content_summary                         String?
  status                                  String?                    @default("ACTIVE") @db.VarChar(50)
  created_at                              DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime?                  @default(now()) @db.Timestamptz(6)
  patient_document_metadata               patient_document_metadata?
  User_patient_documents_doctor_idToUser  User                       @relation("patient_documents_doctor_idToUser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_patient_documents_patient_idToUser User                       @relation("patient_documents_patient_idToUser", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([doctor_id], map: "idx_patient_documents_doctor_id")
  @@index([patient_id], map: "idx_patient_documents_patient_id")
}

enum PrescriptionStatus {
  PRESCRIBED
  ACTIVE
  PAUSED
  COMPLETED
  ABANDONED
}

enum DayStatus {
  PENDING
  COMPLETED
  MISSED
  POSTPONED
}

enum DailyCheckinQuestionType {
  MULTIPLE_CHOICE
  SCALE
  TEXT
  YES_NO
}

enum SymptomReportStatus {
  PENDING
  REVIEWED
  URGENT
  RESOLVED
}

enum VoiceNoteStatus {
  PROCESSING
  TRANSCRIBED
  ANALYZED
  ERROR
}

model SubscriptionPlan {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  price                 Float
  billingCycle         String                  @default("MONTHLY")
  maxDoctors           Int                     @default(1)
  features             String?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now()) @updatedAt
  maxPatients          Int?                    @default(10)
  maxProtocols         Int?                    @default(5)
  maxCourses           Int?                    @default(3)
  maxProducts          Int?                    @default(20)
  isDefault            Boolean?                @default(false)
  trialDays            Int?                    @default(7)
  unified_subscriptions unified_subscriptions[]

  @@map("subscription_plans")
}

model unified_subscriptions {
  id                 String            @id
  type               subscription_type
  subscriber_id      String
  plan_id            String
  status             String            @default("TRIAL")
  start_date         DateTime          @default(now()) @db.Timestamptz(6)
  end_date           DateTime?         @db.Timestamptz(6)
  trial_end_date     DateTime?         @db.Timestamptz(6)
  auto_renew         Boolean           @default(true)
  max_doctors        Int?
  last_payment_date  DateTime?         @db.Timestamptz(6)
  next_payment_date  DateTime?         @db.Timestamptz(6)
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime          @default(now()) @db.Timestamptz(6)
  subscription_plans SubscriptionPlan  @relation(fields: [plan_id], references: [id], map: "fk_unified_subscriptions_plan")
  user               User?             @relation("UserSubscriptions", fields: [subscriber_id], references: [id], onDelete: Cascade, map: "fk_unified_subscriptions_user")
  clinic             Clinic?           @relation("ClinicSubscriptions", fields: [subscriber_id], references: [id], onDelete: Cascade, map: "fk_unified_subscriptions_clinic")

  @@unique([subscriber_id, type], map: "idx_unified_subscriptions_subscriber_type")
  @@index([status])
  @@index([subscriber_id])
  @@index([type])
}

enum subscription_type {
  DOCTOR
  CLINIC
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model GoogleCalendarCredentials {
  id                String   @id @default(cuid())
  doctorId         String   @unique
  accessToken      String
  refreshToken     String
  expiresAt        DateTime
  calendarId       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  doctor           User     @relation("DoctorGoogleCalendar", fields: [doctorId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String           @id @default(cuid())
  patientId     String
  doctorId      String
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus
  title         String
  notes         String?
  googleEventId String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  patient       User             @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor        User             @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([startTime])
}
